{{- if $.Values.s3.default_endpoint }}
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    {{- range $key, $value := $.Values.backstageLabels }}
    {{ $key }}: {{ $value }}
    {{- end }}
  name: create-{{ $.Values.bucketSecret }}-bucket
  namespace: {{ $.Values.namespace }}
spec:
  selector: {}
  template:
    metadata:
      labels:
        {{- range $key, $value := $.Values.backstageLabels }}
        {{ $key }}: {{ $value }}
        {{- end }}
    spec:
      containers:
        - args:
            - -ec
            - |-
              cat << 'EOF' | python3
              import boto3, os
              s3 = boto3.client("s3",
                                endpoint_url="{{ $.Values.s3.default_endpoint }}",
                                aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
                                aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"))
              bucket = '{{ $.Values.bucketSecret }}'
              print('creating models bucket')
              if bucket not in [bu["Name"] for bu in s3.list_buckets()["Buckets"]]:
                s3.create_bucket(Bucket=bucket)
              EOF
          command:
            - /bin/bash
          envFrom:
            - secretRef:
                name: aws-connection-{{ $.Values.bucketSecret }}
          image: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:2024.1
          imagePullPolicy: IfNotPresent
          name: create-buckets
      restartPolicy: OnFailure
{{- end }}