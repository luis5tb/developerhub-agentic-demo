apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: lmeval-task
  namespace: {{ .Values.namespace }}
  labels:
    backstage.io/kubernetes-id: ${{values.component_id}}
spec:
  params:
    - name: job_name
      description: name of the lm eval job
      type: string
    - name: model
      description: name of the model to evaluate
      type: string
    - name: url
      description: model endpoint
      type: string
    - name: num_concurrent
      description: Concurrent requests
      type: string
    - name: max_retries
      description: Max retries
      type: string
    - name: tokenized_requests
      description: Tokenized requests
      type: string
    - name: tokenizer
      description: Tokenizer
      type: string
    - name: tasks_name
      type: array
      description: Eval Tasks to use (only set task_name or task_recipe)
      default: []
    - name: task_recipe
      description: Eval Recipe to use (object with the template and then either the card_name or card_custom)
      type: object
      properties:
        card_name: {type: string}
        card_custom: {type: string}
        template: {type: string}
      default: {}
  steps:
    - name: run-lmeval
      image: {{ .Values.evalOptions.baseImage }}
      args:
        - "$(params.tasks_name[*])"
      script: |
        cat <<EOF > /workspace/shared-data/evaljob.yaml
        apiVersion: trustyai.opendatahub.io/v1alpha1
        kind: LMEvalJob
        metadata:
          name: $(params.job_name)
          namespace: {{ .Values.namespace }}
        spec:
          model: local-completions
          taskList:
        EOF

        if [ "$#" -gt 0 ] && [ -n "$1" ]; then
            echo "    taskNames:" >> /workspace/shared-data/evaljob.yaml
            for task in "$@"; do
              echo "      - $task" >> /workspace/shared-data/evaljob.yaml
            done
        elif [ -n "$(params.task_recipe.template)" ]; then
          echo "    taskRecipes:" >> /workspace/shared-data/evaljob.yaml
          echo "    - template: \"$(params.task_recipe.template)\"" >> /workspace/shared-data/evaljob.yaml
          echo "      card:" >> /workspace/shared-data/evaljob.yaml
          if [ -n "$(params.task_recipe.card_name)" ]; then
            echo "        name: \"$(params.task_recipe.card_name)\"" >> /workspace/shared-data/evaljob.yaml
          elif [ -n "$(params.task_recipe.card_custom)" ]; then 
            echo "        custom: |" >> /workspace/shared-data/evaljob.yaml
            echo "\"$(params.task_recipe.card_custom)\"" | sed 's/^/          /' >> /workspace/shared-data/evaljob.yaml
          fi
        else
          echo "Error: Either tasks_names or task_recipe must be provided."
          exit 1
        fi

        cat <<EOF >> /workspace/shared-data/evaljob.yaml
          logSamples: true
          batchSize: "1"
          allowOnline: true
          allowCodeExecution: true
          modelArgs:
            - name: model
              value: $(params.model)
            - name: base_url
              value: $(params.url)/v1/completions
            - name: num_concurrent
              value: "$(params.num_concurrent)"
            - name: max_retries
              value: "$(params.max_retries)"
            - name: tokenized_requests
              value: "$(params.tokenized_requests)"
            - name: tokenizer
              value: $(params.tokenizer)
            - name: verify_certificate
              value: "{{ $.Values.evalOptions.verifyCertificate }}"
          pod:
            container:
              env:
              - name: OPENAI_API_KEY
                valueFrom:
                      secretKeyRef:
                        name: {{ $.Values.saName }}-{{ $.Values.modelName }}-sa
                        key: token
              resources:
                  limits:
                    cpu: '1'
                    memory: 8Gi
                    nvidia.com/gpu: '1'
                  requests:
                    cpu: '1'
                    memory: 8Gi
                    nvidia.com/gpu: '1'
          outputs:
            pvcManaged:
              size: 5Gi
        EOF

        cat /workspace/shared-data/evaljob.yaml
        oc create -f /workspace/shared-data/evaljob.yaml

        # Wait for job completion
        oc wait -n {{ .Values.namespace }} --timeout=3600s --for=condition=complete lmevaljob/$(params.job_name)
  workspaces:
    - name: shared-data
